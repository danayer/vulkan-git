name: Check Vulkan Headers Updates

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Check for Vulkan-Headers updates
        id: check-update
        run: |
          python - <<EOF
          import re
          import requests
          import os
          
          # Fetch all tags from the repo
          api_url = "https://api.github.com/repos/KhronosGroup/Vulkan-Headers/tags"
          headers = {}
          
          # Use GitHub token if available
          if 'GITHUB_TOKEN' in os.environ:
              headers['Authorization'] = f"token {os.environ['GITHUB_TOKEN']}"
          
          print(f"Fetching Vulkan-Headers tags from {api_url}")
          response = requests.get(api_url, headers=headers)
          
          if response.status_code == 200:
              tags = response.json()
              # Find tags with version format v1.x.x
              version_pattern = re.compile(r'v(\d+\.\d+\.\d+)')
              version_tags = []
              
              for tag in tags:
                  match = version_pattern.match(tag['name'])
                  if match:
                      version = match.group(1)
                      version_tags.append((version, tag['name']))
              
              if version_tags:
                  # Sort by version components to get the latest
                  version_tags.sort(key=lambda x: [int(n) for n in x[0].split('.')])
                  latest_version = version_tags[-1][0]
                  latest_tag = version_tags[-1][1]
                  print(f"Latest tag: {latest_tag}")
                  print(f"Latest version: {latest_version}")
              else:
                  print("No version tags found")
                  exit(1)
              
              # Read current version from spec file
              spec_file = "vulkan-headers.spec"
              try:
                  with open(spec_file, 'r') as f:
                      spec_content = f.read()
              except FileNotFoundError:
                  print(f"Error: Spec file {spec_file} not found")
                  exit(1)
              
              # Extract current version
              current_version_match = re.search(r'Version:\s+"?(\d+\.\d+\.\d+)"?', spec_content)
              if current_version_match:
                  current_version = current_version_match.group(1)
                  print(f"Current version: {current_version}")
                  
                  # Check if update is needed
                  if current_version != latest_version:
                      print(f"Update needed from {current_version} to {latest_version}!")
                      
                      # Update version in spec file
                      new_content = re.sub(r'(Version:\s+"?)(\d+\.\d+\.\d+)("?)', r'\g<1>' + latest_version + r'\g<3>', spec_content)
                      
                      # Update URL format
                      new_content = re.sub(
                          r'https://github.com/KhronosGroup/Vulkan-Headers/archive/(?:sdk-|refs/tags/v)?\d+\.\d+\.\d+\.tar\.gz',
                          f'https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/v{latest_version}.tar.gz',
                          new_content
                      )
                      
                      with open(spec_file, 'w') as f:
                          f.write(new_content)
                      
                      # Set output for GitHub Actions
                      with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                          env_file.write(f"UPDATED=true\n")
                          env_file.write(f"NEW_VERSION={latest_version}\n")
                  else:
                      # Even if version is the same, check if URL needs to be updated
                      correct_url = f"https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/v{current_version}.tar.gz"
                      if correct_url not in spec_content:
                          print("URL format needs to be updated")
                          
                          # Update URLs to use the correct format
                          new_content = re.sub(
                              r'https://github.com/KhronosGroup/Vulkan-Headers/archive/(?:sdk-|refs/tags/v)?\d+\.\d+\.\d+\.tar\.gz',
                              correct_url,
                              spec_content
                          )
                          
                          with open(spec_file, 'w') as f:
                              f.write(new_content)
                          
                          # Set output for GitHub Actions
                          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                              env_file.write(f"UPDATED=true\n")
                              env_file.write(f"NEW_VERSION={current_version}\n")
                              env_file.write(f"URL_ONLY_UPDATE=true\n")
                      else:
                          print("No update needed")
                          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                              env_file.write("UPDATED=false\n")
              else:
                  print("Failed to extract current version")
          else:
              print(f"Failed to get latest version: {response.status_code}")
              print(f"Response: {response.text}")
          EOF
      
      - name: Commit changes if updated
        if: env.UPDATED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "vulkan-headers.spec"
          if [ "${{ env.URL_ONLY_UPDATE }}" == "true" ]; then
            git commit -m "Fix Vulkan Headers download URL format for version ${{ env.NEW_VERSION }}"
          else
            git commit -m "Update Vulkan Headers to version ${{ env.NEW_VERSION }}"
          fi
          git push
